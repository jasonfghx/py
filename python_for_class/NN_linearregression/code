import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from keras.utils import np_utils, generic_utils
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from keras.layers.core import Dense, RepeatVector

df = pd.read_csv('DM_Assignment_4_NN.csv')
df=df.drop(df.columns[[0]],axis=1)
X=df.iloc[:, :-2]
X1=df.drop(df.columns[[0,2,3,20]],axis=1)
y=df.iloc[:, -2:]
scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)    
scaler = StandardScaler()
scaler.fit(y)
y = scaler.transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
from keras.models import Sequential
from keras.layers import Dense
classifier = Sequential()
classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'linear',input_dim = 4))#第一層
classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'linear'))#第二層，activation可以用relu
classifier.add(Dense(output_dim=2))#表示要預測的y有幾個，此處表示有兩個
classifier.compile(optimizer = 'sgd', loss = 'mse', metrics = ['mse'])#optimizer可以用rmsprop或adam
classifier.fit(X_train, y_train, batch_size = 50, epochs = 230)

y_pred = (pd.DataFrame(classifier.predict(X_test)))
y_test1=pd.DataFrame(y_test)
mse_y15=np.mean((y_test1.loc[:,0]-y_pred.loc[:,0])**2)###評估誤差
mse_y25=np.mean((y_test1.loc[:,1]-y_pred.loc[:,1])**2)
