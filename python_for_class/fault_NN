import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler #務必使數據標準化
from sklearn.model_selection import train_test_split
from keras.utils import np_utils, generic_utils #使y變數變成稀疏矩陣
from keras.models import Sequential
from keras.layers import Dense
from sklearn import metrics
df = pd.read_csv('steeldata.csv')
X=df.iloc[:, :-8]
y=df.iloc[:, -1:]
scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)    
X_train,X_test, y_train,y_test = train_test_split(X, y, test_size=0.2, random_state=1)
y_test=np_utils.to_categorical(y_test,num_classes=7)
y_train=np_utils.to_categorical(y_train,num_classes=7)
classifier = Sequential() #建置一個初始化的類神經網路模型。
classifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu',input_dim = 27))
#首先我們建立第一層，20個node，權重是要訓練的，賦予uniform作為初始值，
#input_dim=27表示我們有27個變數要進入該模型。

classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))
#建立第二層，16個node。

classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))
#建立第三層，6個node，以本數據來看，多這層導致overfitting，因此除去。

classifier.add(Dense(units = 7, kernel_initializer = 'normal', activation = 'softmax'))
from keras.callbacks import EarlyStopping
early_stopping = EarlyStopping(monitor='acc', patience=20, verbose=2)
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
classifier.fit(X_train, y_train, batch_size = 40, epochs = 300, callbacks=[early_stopping],validation_data=(X_test, y_test))
 
y_pred = round(pd.DataFrame(classifier.predict(X_test)))#預測


ab= pd.DataFrame(np.empty([389,1]))
for i in range(0,389):
    ab.iloc[i,0]=pd.DataFrame(np.where(y_pred.iloc[i,:]==y_pred.iloc[i,:].max())[0]).iloc[0,0]
print(metrics.accuracy_score(y_test,ab))  #準確率為77%

from sklearn.metrics import confusion_matrix
a=confusion_matrix(y_test,ab)
#y_test is y axis  ab is x axis
plot_confusion_matrix(cm           = a, 
                      normalize    = False,
                      target_names = ['0', '1',"2","3","4","5","6"],
                      title        = "Confusion Matrix")    

def plot_confusion_matrix(cm,
                          target_names,
                          title='Confusion matrix',
                          cmap=None,
                          normalize=True):
    import matplotlib.pyplot as plt
    import numpy as np
    import itertools

    accuracy = np.trace(cm) / float(np.sum(cm))
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('Blues')

    plt.figure(figsize=(4, 3))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]


    thresh = cm.max() / 12 if normalize else cm.max() / 12
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")


    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))
    plt.show()
